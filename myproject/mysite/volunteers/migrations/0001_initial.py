# Generated by Django 5.2 on 2025-04-23 20:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

"""    initial = True - указывает, что это начальная миграция

    dependencies - список зависимостей (в данном случае от миграций auth)

    operations - список операций, которые будут выполнены при применении миграции"""
class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        
        migrations.CreateModel( 
        #Расширяет стандартную модель User Django
        #Добавляет флаги для разных типов пользователей (волонтер, партнер, админ)
        #Сохраняет все стандартные поля и функциональность Django User
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_volunteer', models.BooleanField(default=False)),
                ('is_partner', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            #Связана один-к-одному с основной моделью User
            #Содержит дополнительную информацию о партнере
            #При удалении пользователя удаляется и связанный партнер (CASCADE)
            name='Partner',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('company_name', models.CharField(max_length=100)),
                ('contact_person', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            #Также связана с User один-к-одному
            #ИНН и уникальный код должны быть уникальными
            #Категория волонтера определяется выбором из 3 вариантов
            #Содержит персональные данные и достижения волонтера
            name='Volunteer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('full_name', models.CharField(max_length=100)),
                ('inn', models.CharField(max_length=12, unique=True)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.EmailField(max_length=254)),
                ('birth_date', models.DateField()),
                ('achievements', models.TextField()),
                ('category', models.IntegerField(choices=[(1, '1-50'), (2, '51-100'), (3, '101-150')])),
                ('unique_code', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            #Бонусы привязаны к партнерам (ForeignKey)
            #Имеют срок действия (valid_from, valid_to)
            #Доступны для определенных категорий волонтеров
            #Могут быть активны/неактивны
            name='Bonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('category_available', models.IntegerField(choices=[(1, '1-50'), (2, '51-100'), (3, '101-150')])),
                ('valid_from', models.DateField()),
                ('valid_to', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteers.partner')),
            ],
        ),
        migrations.CreateModel(
            #Фиксирует факт выдачи бонуса
            #Содержит информацию о волонтере, партнере и самом бонусе
            #Автоматически записывает дату выдачи
            #Хранит использованный код
            name='BonusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_issued', models.DateTimeField(auto_now_add=True)),
                ('code_used', models.CharField(max_length=20)),
                ('bonus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteers.bonus')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteers.partner')),
                ('volunteer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='volunteers.volunteer')),
            ],
        ),
    ]
